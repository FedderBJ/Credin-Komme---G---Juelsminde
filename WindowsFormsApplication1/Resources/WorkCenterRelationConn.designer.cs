#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WindowsFormsApplication1.Resources
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="NAVISION")]
	public partial class WorkCenterRelationConnDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCredin_Employee_Work_Center_Relation(Credin_Employee_Work_Center_Relation instance);
    partial void UpdateCredin_Employee_Work_Center_Relation(Credin_Employee_Work_Center_Relation instance);
    partial void DeleteCredin_Employee_Work_Center_Relation(Credin_Employee_Work_Center_Relation instance);
    #endregion
		
		public WorkCenterRelationConnDataContext() : 
				base(global::WindowsFormsApplication1.Properties.Settings.Default.TEST_NAVConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public WorkCenterRelationConnDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WorkCenterRelationConnDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WorkCenterRelationConnDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WorkCenterRelationConnDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Credin_Employee_Work_Center_Relation> Credin_Employee_Work_Center_Relations
		{
			get
			{
				return this.GetTable<Credin_Employee_Work_Center_Relation>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Credin$Employee Work Center Relation]")]
	public partial class Credin_Employee_Work_Center_Relation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Data.Linq.Binary _timestamp;
		
		private string _Employee_No_;
		
		private string _Work_Center;
		
		private string _Work_Center_Name;
		
		private int _Sorting;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntimestampChanging(System.Data.Linq.Binary value);
    partial void OntimestampChanged();
    partial void OnEmployee_No_Changing(string value);
    partial void OnEmployee_No_Changed();
    partial void OnWork_CenterChanging(string value);
    partial void OnWork_CenterChanged();
    partial void OnWork_Center_NameChanging(string value);
    partial void OnWork_Center_NameChanged();
    partial void OnSortingChanging(int value);
    partial void OnSortingChanged();
    #endregion
		
		public Credin_Employee_Work_Center_Relation()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary timestamp
		{
			get
			{
				return this._timestamp;
			}
			set
			{
				if ((this._timestamp != value))
				{
					this.OntimestampChanging(value);
					this.SendPropertyChanging();
					this._timestamp = value;
					this.SendPropertyChanged("timestamp");
					this.OntimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Employee No_]", Storage="_Employee_No_", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public string Employee_No_
		{
			get
			{
				return this._Employee_No_;
			}
			set
			{
				if ((this._Employee_No_ != value))
				{
					this.OnEmployee_No_Changing(value);
					this.SendPropertyChanging();
					this._Employee_No_ = value;
					this.SendPropertyChanged("Employee_No_");
					this.OnEmployee_No_Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Work Center]", Storage="_Work_Center", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public string Work_Center
		{
			get
			{
				return this._Work_Center;
			}
			set
			{
				if ((this._Work_Center != value))
				{
					this.OnWork_CenterChanging(value);
					this.SendPropertyChanging();
					this._Work_Center = value;
					this.SendPropertyChanged("Work_Center");
					this.OnWork_CenterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Work Center Name]", Storage="_Work_Center_Name", DbType="VarChar(30) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Work_Center_Name
		{
			get
			{
				return this._Work_Center_Name;
			}
			set
			{
				if ((this._Work_Center_Name != value))
				{
					this.OnWork_Center_NameChanging(value);
					this.SendPropertyChanging();
					this._Work_Center_Name = value;
					this.SendPropertyChanged("Work_Center_Name");
					this.OnWork_Center_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sorting", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Sorting
		{
			get
			{
				return this._Sorting;
			}
			set
			{
				if ((this._Sorting != value))
				{
					this.OnSortingChanging(value);
					this.SendPropertyChanging();
					this._Sorting = value;
					this.SendPropertyChanged("Sorting");
					this.OnSortingChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
